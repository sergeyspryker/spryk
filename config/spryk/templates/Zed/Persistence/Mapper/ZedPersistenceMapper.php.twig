<?php

{{ include('Partials/license.twig') }}

namespace {{ organization }}\Zed\{{ module }}\Persistence\Mapper;

use Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer;
use Generated\Shared\Transfer\{{ domainEntity }}Transfer;
use Orm\Zed\{{ module }}\Persistence\Base\{{ tableName | camelCased }};
use Propel\Runtime\Collection\ObjectCollection;

class {{ module }}Mapper implements {{ module }}MapperInterface
{
    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer
     *
     * @return \Orm\Zed\{{ module }}\Persistence\Base\{{ tableName | camelCased }}[]|\Propel\Runtime\Collection\ObjectCollection
     */
    public function map{{ domainEntity }}TransferCollectionTo{{ domainEntity }}EntityCollection(
        {{ domainEntity }}CollectionTransfer ${{ domainEntity | lcfirst }}CollectionTransfer
    ): ObjectCollection {
        ${{ domainEntity | lcfirst }}EntityCollection = new ObjectCollection();
        ${{ domainEntity | lcfirst | pluralize }} = ${{ domainEntity | lcfirst }}CollectionTransfer->get{{ domainEntity | pluralize }}();

        foreach (${{ domainEntity | lcfirst | pluralize }} as ${{ domainEntity | lcfirst }}) {
            ${{ domainEntity | lcfirst }}EntityCollection->append(
                $this->map{{ domainEntity }}TransferTo{{ domainEntity }}Entity(${{ domainEntity | lcfirst }})
            );
        }

        return ${{ domainEntity | lcfirst }}EntityCollection;
    }

    /**
     * @param \Orm\Zed\{{ module }}\Persistence\Base\{{ tableName | camelCased }}[]|\Propel\Runtime\Collection\ObjectCollection ${{ domainEntity | lcfirst }}EntityCollection
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}CollectionTransfer
     */
    public function map{{ domainEntity }}EntityCollectionTo{{ domainEntity }}TransferCollection(
        ObjectCollection ${{ domainEntity | lcfirst }}EntityCollection
    ): {{ domainEntity }}CollectionTransfer {
        ${{ domainEntity | lcfirst }}Transfers = new ArrayObject();

        foreach(${{ domainEntity | lcfirst }}EntityCollection as ${{ domainEntity | lcfirst }}Entity) {
            ${{ domainEntity | lcfirst }}Transfers->append($this->map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(${{ domainEntity | lcfirst }}Entity));
        }

        ${{ domainEntity | lcfirst }}CollectionTransfer = new {{ domainEntity }}CollectionTransfer();
        ${{ domainEntity | lcfirst }}CollectionTransfer->set{{ domainEntity | pluralize }}(${{ domainEntity | lcfirst }}Transfers);

        return ${{ domainEntity | lcfirst }}CollectionTransfer;
    }

    /**
     * @param \Generated\Shared\Transfer\{{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer
     *
     * @return \Orm\Zed\{{ module }}\Persistence\Base\{{ tableName | camelCased }}
     */
    public function map{{ domainEntity }}TransferTo{{ domainEntity }}Entity(
        {{ domainEntity }}Transfer ${{ domainEntity | lcfirst }}Transfer
    ): {{ tableName | camelCased }} {
        ${{ domainEntity | lcfirst }}Entity = new {{ tableName | camelCased }}();
        ${{ domainEntity | lcfirst }}Entity->fromArray(${{ domainEntity | lcfirst }}Transfer->modifiedToArray(false));

        return ${{ domainEntity | lcfirst }}Entity;
    }

    /**
     * @param \Orm\Zed\{{ module }}\Persistence\Base\{{ tableName | camelCased }} ${{ tableName | camelCased | lcfirst }}Entity
     *
     * @return \Generated\Shared\Transfer\{{ domainEntity }}Transfer
     */
    public function map{{ domainEntity }}EntityTo{{ domainEntity }}Transfer(
        {{ tableName | camelCased }} ${{ tableName | camelCased | lcfirst }}Entity
    ): {{ domainEntity }}Transfer {
        ${{ domainEntity | lcfirst }}Transfer = new {{ domainEntity }}Transfer();
        ${{ domainEntity | lcfirst }}Transfer->fromArray(${{ tableName | camelCased | lcfirst }}Entity->toArray());

        return ${{ domainEntity | lcfirst }}Transfer;
    }
}
